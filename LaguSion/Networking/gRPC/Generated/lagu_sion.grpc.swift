//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: LaguSion/Networking/gRPC/protobuf/lagu_sion.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Lagusion_LaguSionServiceClient, then call methods of this protocol to make API calls.
public protocol Lagusion_LaguSionServiceClientProtocol: GRPCClient {
  func listSongs(
    _ request: Lagusion_ListSongRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Lagusion_ListSongRequest, Lagusion_ListSongResponse>

}

extension Lagusion_LaguSionServiceClientProtocol {

  /// Unary call to ListSongs
  ///
  /// - Parameters:
  ///   - request: Request to send to ListSongs.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listSongs(
    _ request: Lagusion_ListSongRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Lagusion_ListSongRequest, Lagusion_ListSongResponse> {
    return self.makeUnaryCall(
      path: "/lagusion.LaguSionService/ListSongs",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Lagusion_LaguSionServiceClient: Lagusion_LaguSionServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the lagusion.LaguSionService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

public final class Lagusion_LaguSionServiceTestClient: Lagusion_LaguSionServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions()
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
  }

  /// Make a unary response for the ListSongs RPC. This must be called
  /// before calling 'listSongs'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeListSongsResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<Lagusion_ListSongRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<Lagusion_ListSongRequest, Lagusion_ListSongResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/lagusion.LaguSionService/ListSongs", requestHandler: requestHandler)
  }

  public func enqueueListSongsResponse(
    _ response: Lagusion_ListSongResponse,
    _ requestHandler: @escaping (FakeRequestPart<Lagusion_ListSongRequest>) -> () = { _ in }
  )  {
    let stream = self.makeListSongsResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'ListSongs'
  public var hasListSongsResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/lagusion.LaguSionService/ListSongs")
  }
}


// Provides conformance to `GRPCPayload`
extension Lagusion_UUID: GRPCProtobufPayload {}
extension Lagusion_Verse: GRPCProtobufPayload {}
extension Lagusion_Book: GRPCProtobufPayload {}
extension Lagusion_Song: GRPCProtobufPayload {}
extension Lagusion_ListSongRequest: GRPCProtobufPayload {}
extension Lagusion_ListSongResponse: GRPCProtobufPayload {}
