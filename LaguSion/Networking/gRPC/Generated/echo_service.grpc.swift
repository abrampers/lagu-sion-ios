//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: LaguSion/Networking/gRPC/protobuf/echo_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate EchoServiceClient, then call methods of this protocol to make API calls.
public protocol EchoServiceClientProtocol: GRPCClient {
  func sayItBack(
    callOptions: CallOptions?,
    handler: @escaping (EchoResponse) -> Void
  ) -> BidirectionalStreamingCall<EchoRequest, EchoResponse>

  func sayItBackOnce(
    _ request: EchoRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<EchoRequest, EchoResponse>

}

extension EchoServiceClientProtocol {

  /// Bidirectional streaming call to SayItBack
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  public func sayItBack(
    callOptions: CallOptions? = nil,
    handler: @escaping (EchoResponse) -> Void
  ) -> BidirectionalStreamingCall<EchoRequest, EchoResponse> {
    return self.makeBidirectionalStreamingCall(
      path: "/EchoService/SayItBack",
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to SayItBackOnce
  ///
  /// - Parameters:
  ///   - request: Request to send to SayItBackOnce.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func sayItBackOnce(
    _ request: EchoRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EchoRequest, EchoResponse> {
    return self.makeUnaryCall(
      path: "/EchoService/SayItBackOnce",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class EchoServiceClient: EchoServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the EchoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

public final class EchoServiceTestClient: EchoServiceClientProtocol {
  private let fakeChannel: FakeChannel
  public var defaultCallOptions: CallOptions

  public var channel: GRPCChannel {
    return self.fakeChannel
  }

  public init(
    fakeChannel: FakeChannel = FakeChannel(),
    defaultCallOptions callOptions: CallOptions = CallOptions()
  ) {
    self.fakeChannel = fakeChannel
    self.defaultCallOptions = callOptions
  }

  /// Make a streaming response for the SayItBack RPC. This must be called
  /// before calling 'sayItBack'. See also 'FakeStreamingResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSayItBackResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<EchoRequest>) -> () = { _ in }
  ) -> FakeStreamingResponse<EchoRequest, EchoResponse> {
    return self.fakeChannel.makeFakeStreamingResponse(path: "/EchoService/SayItBack", requestHandler: requestHandler)
  }

  public func enqueueSayItBackResponses(
    _ responses: [EchoResponse],
    _ requestHandler: @escaping (FakeRequestPart<EchoRequest>) -> () = { _ in }
  )  {
    let stream = self.makeSayItBackResponseStream(requestHandler)
    // These are the only operation on the stream; try! is fine.
    responses.forEach { try! stream.sendMessage($0) }
    try! stream.sendEnd()
  }

  /// Returns true if there are response streams enqueued for 'SayItBack'
  public var hasSayItBackResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/EchoService/SayItBack")
  }

  /// Make a unary response for the SayItBackOnce RPC. This must be called
  /// before calling 'sayItBackOnce'. See also 'FakeUnaryResponse'.
  ///
  /// - Parameter requestHandler: a handler for request parts sent by the RPC.
  public func makeSayItBackOnceResponseStream(
    _ requestHandler: @escaping (FakeRequestPart<EchoRequest>) -> () = { _ in }
  ) -> FakeUnaryResponse<EchoRequest, EchoResponse> {
    return self.fakeChannel.makeFakeUnaryResponse(path: "/EchoService/SayItBackOnce", requestHandler: requestHandler)
  }

  public func enqueueSayItBackOnceResponse(
    _ response: EchoResponse,
    _ requestHandler: @escaping (FakeRequestPart<EchoRequest>) -> () = { _ in }
  )  {
    let stream = self.makeSayItBackOnceResponseStream(requestHandler)
    // This is the only operation on the stream; try! is fine.
    try! stream.sendMessage(response)
  }

  /// Returns true if there are response streams enqueued for 'SayItBackOnce'
  public var hasSayItBackOnceResponsesRemaining: Bool {
    return self.fakeChannel.hasFakeResponseEnqueued(forPath: "/EchoService/SayItBackOnce")
  }
}


// Provides conformance to `GRPCPayload`
extension EchoRequest: GRPCProtobufPayload {}
extension EchoResponse: GRPCProtobufPayload {}
