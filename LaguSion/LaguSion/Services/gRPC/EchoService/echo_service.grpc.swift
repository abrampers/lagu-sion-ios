//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: echo_service.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate EchoServiceClient, then call methods of this protocol to make API calls.
internal protocol EchoServiceClientProtocol {
  func sayItBack(callOptions: CallOptions?, handler: @escaping (EchoResponse) -> Void) -> BidirectionalStreamingCall<EchoRequest, EchoResponse>
  func sayItBackOnce(_ request: EchoRequest, callOptions: CallOptions?) -> UnaryCall<EchoRequest, EchoResponse>
}

internal final class EchoServiceClient: GRPCClient, EchoServiceClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the EchoService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Bidirectional streaming call to SayItBack
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func sayItBack(callOptions: CallOptions? = nil, handler: @escaping (EchoResponse) -> Void) -> BidirectionalStreamingCall<EchoRequest, EchoResponse> {
    return self.makeBidirectionalStreamingCall(path: "/EchoService/SayItBack",
                                               callOptions: callOptions ?? self.defaultCallOptions,
                                               handler: handler)
  }

  /// Unary call to SayItBackOnce
  ///
  /// - Parameters:
  ///   - request: Request to send to SayItBackOnce.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func sayItBackOnce(_ request: EchoRequest, callOptions: CallOptions? = nil) -> UnaryCall<EchoRequest, EchoResponse> {
    return self.makeUnaryCall(path: "/EchoService/SayItBackOnce",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}

/// To build a server, implement a class that conforms to this protocol.
internal protocol EchoServiceProvider: CallHandlerProvider {
  func sayItBack(context: StreamingResponseCallContext<EchoResponse>) -> EventLoopFuture<(StreamEvent<EchoRequest>) -> Void>
  func sayItBackOnce(request: EchoRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EchoResponse>
}

extension EchoServiceProvider {
  internal var serviceName: String { return "EchoService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: String, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "SayItBack":
      return BidirectionalStreamingCallHandler(callHandlerContext: callHandlerContext) { context in
        return self.sayItBack(context: context)
      }

    case "SayItBackOnce":
      return UnaryCallHandler(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.sayItBackOnce(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}


// Provides conformance to `GRPCPayload` for request and response messages
extension EchoRequest: GRPCProtobufPayload {}
extension EchoResponse: GRPCProtobufPayload {}

